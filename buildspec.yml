version: 0.2

phases:
  install:
    commands:
      - aws --version
  pre_build:
    commands:
      - REPOSITORY_REGISTRY=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com
      - REPOSITORY_URI=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${REPOSITORY_NAME}
      - IMAGE_TAG=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - echo Logging in to Amazon ECR...
      - aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${REPOSITORY_REGISTRY}
      - docker pull ${REPOSITORY_URI}:latest || true
  build:
    commands:
      - echo Build started on `date`
      - echo Building the Docker image...
      - docker build -f ./Dockerfile.dev --no-cache --build-arg SKIP_INSTALL_SCRIPT_ON_DOCKER_BUILD=true -t ${REPOSITORY_URI}:latest .
      - docker tag ${REPOSITORY_URI}:latest ${REPOSITORY_URI}:${IMAGE_TAG}
  post_build:
    commands:
      - echo Build completed on `date`
      - echo Pushing the Docker images...
      - docker push ${REPOSITORY_URI}:${IMAGE_TAG}
      - docker push ${REPOSITORY_URI}:latest
      - echo Writing imageDetail.json file ...
      - printf '{"ImageURI":"%s"}' $REPOSITORY_URI:$IMAGE_TAG > imageDetail.json && cat imageDetail.json
      - sh -c "envsubst < appspec.yml  > appspec.yml.out  && mv appspec.yml.out appspec.yml   && cat appspec.yml"
      - sh -c "envsubst < taskdef.json > taskdef.json.out && mv taskdef.json.out taskdef.json && cat taskdef.json"
artifacts:
  files:
    - imageDetail.json
    - appspec.yml
    - taskdef.json